cmake_minimum_required(VERSION 2.8.9)
set(PROJECT_NAME_STR data-migrator)
project(${PROJECT_NAME_STR} C CXX)

set(CMAKE_BUILD_TYPE Release)

#SET(CMAKE_CXX_COMPILER "g++")
# another possible parameter: -std=c++11 / or -std=c++14
set(CMAKE_CXX_FLAGS " -ggdb -Wall -Wextra -Woverloaded-virtual -Wconversion -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Winit-self -Wno-sign-compare -Wno-unused-parameter -D__STDC_CONSTANT_MACROS -D__STDC_LIMIT_MACROS -DNOCLOCK -fno-omit-frame-pointer -fvisibility=hidden -DBOOST_SP_DISABLE_THREADS -Wno-ignored-qualifiers -fno-strict-aliasing -Wno-return-type")

set(project_path "src/data-formatter")
#Bring the headers, such as Student.h into the project
#include_directories(include/attribute)
file(GLOB_RECURSE HEADERS "${project_path}/*.h")
MESSAGE( STATUS "project_path:         " ${project_path} )
MESSAGE( STATUS "HEADERS:         " ${HEADERS} )
include_directories(${project_path} ${project_path}/format ${project_path}/formatter ${project_path}/postgres ${project_path}/common ${project_path}/csv ${project_path}/vertica ${project_path}/vertica)

#Can manually add the sources using the set command as follows:
#set(SOURCES src/mainapp.cpp src/Student.cpp)
 
#However, the file(GLOB...) allows for wildcard additions:
#file(GLOB SOURCES "src/attribute/*.cpp")
set(sources_path "src")
file(GLOB_RECURSE SOURCES "${sources_path}/*.cpp")
MESSAGE( STATUS "SOURCES:         " ${SOURCES} )
 
#Set the location for library installation -- i.e., /usr/lib in this case
# not really necessary in this example. Use "sudo make install" to apply
#install(TARGETS data-migrator DESTINATION /usr/lib)
#install(TARGETS attribute DESTINATION /usr/lib)

# creat the shared library for the data migrator
#Generate the shared library from the sources
#add_library(data-migrator SHARED ${SOURCES})
#add_library(attribute SHARED src/attribute.cpp include/attribute.h)


# create the main executable 
#add_executable(data-migrator-exe ${SOURCES})
add_executable(data-migrator-exe ${SOURCES})

# this is an example how to add executable that is merely a single file
#add_executable(data-migrator-exe src/data-migrator.cpp)

#will install data-migrator to <prefix>/bin and myStaticLib to <prefix>/lib/static. On non-DLL platforms mySharedLib will be installed to <prefix>/lib and /some/full/path. On DLL platforms the mySharedLib DLL will be installed to <prefix>/bin and /some/full/path and its import library will be installed to <prefix>/lib/static and /some/full/path.
# <prefix> make DESTDIR=/home/john install; This variable defaults to /usr/local on UNIX and c:/Program Files on Windows.

# install(TARGETS data-migrator
#         RUNTIME DESTINATION bin
#         LIBRARY DESTINATION lib
#         ARCHIVE DESTINATION lib/static
# 	PUBLIC_HEADER DESTINATION include/data-migrator)

# INSTALL(FILES ${HEADERS}
#         DESTINATION include/data-migrator)

# install(TARGETS data-migrator
#         RUNTIME DESTINATION /usr/bin
#         LIBRARY DESTINATION /usr/lib
#         ARCHIVE DESTINATION /usr/lib/static
# 	PUBLIC_HEADER DESTINATION /usr/include)

# INSTALL(FILES ${HEADERS}
#         DESTINATION /usr/include)
 
# add boost library
set(Boost_USE_STATIC_LIBS OFF) 
set(Boost_USE_MULTITHREADED ON)  
set(Boost_USE_STATIC_RUNTIME OFF)
#find_package(Boost 1.60.0 COMPONENTS log thread system log_setup)
find_package(Boost COMPONENTS log thread system log_setup)

if(Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS})
    add_definitions(-DBOOST_LOG_DYN_LINK)
    #target_link_libraries(data-migrator ${Boost_LIBRARIES})
    target_link_libraries(data-migrator-exe ${Boost_LIBRARIES})
endif()

# add pthread
find_package(Threads REQUIRED)
if(THREADS_HAVE_PTHREAD_ARG)
  #target_compile_options(PUBLIC data-migrator "-pthread")
  target_compile_options(PUBLIC data-migrator-exe "-pthread")
endif()

if(CMAKE_THREAD_LIBS_INIT)
  #target_link_libraries(data-migrator "${CMAKE_THREAD_LIBS_INIT}")
endif()

# tests
option(build_tests "Build all of gtest's own tests." OFF)



#------------------------
# TESTS
#-----------------------

if(CMAKE_COMPILER_IS_GNUCXX)
    add_definitions(-Wall -ansi -Wno-deprecated -pthread)
endif()

if(MSVC)
    #vc 2012 fix for vararg templates
    set(MSVC_COMPILER_DEFS "-D_VARIADIC_MAX=10")
endif() 

set(EXT_PROJECTS_DIR ${PROJECT_SOURCE_DIR}/ext)

add_subdirectory(${EXT_PROJECTS_DIR}/gtest)

add_definitions(${MSVC_COMPILER_DEFS})
enable_testing()
set(PROJECT_TEST_NAME ${PROJECT_NAME_STR}_test)
include_directories(${GTEST_INCLUDE_DIRS})

file(GLOB TEST_SRC_FILES ${PROJECT_SOURCE_DIR}/test/main_tests/*.cc)
#file(${PROJECT_SOURCE_DIR}/test/numeric.cc)
add_executable(${PROJECT_TEST_NAME} ${TEST_SRC_FILES})
add_dependencies(${PROJECT_TEST_NAME} googletest)

#file(GLOB_RECURSE HEADERS ${EXT_PROJECTS_DIR}/src/googletest/googletest/include/*.h)

if(NOT WIN32 OR MINGW)
MESSAGE( STATUS "GTEST_LIBS_DIR:         " ${GTEST_LIBS_DIR} )
    target_link_libraries(${PROJECT_TEST_NAME}
        ${GTEST_LIBS_DIR}/libgtest.a
        ${GTEST_LIBS_DIR}/libgtest_main.a
        )
else()
# gtest
    target_link_libraries(${PROJECT_TEST_NAME}
        debug ${GTEST_LIBS_DIR}/DebugLibs/${CMAKE_FIND_LIBRARY_PREFIXES}gtest${CMAKE_FIND_LIBRARY_SUFFIXES}
        optimized ${GTEST_LIBS_DIR}/ReleaseLibs/${CMAKE_FIND_LIBRARY_PREFIXES}gtest${CMAKE_FIND_LIBRARY_SUFFIXES}
        )
# gtest main
    target_link_libraries(${PROJECT_TEST_NAME}
        debug ${GTEST_LIBS_DIR}/DebugLibs/${CMAKE_FIND_LIBRARY_PREFIXES}gtest_main${CMAKE_FIND_LIBRARY_SUFFIXES}
        optimized ${GTEST_LIBS_DIR}/ReleaseLibs/${CMAKE_FIND_LIBRARY_PREFIXES}gtest_main${CMAKE_FIND_LIBRARY_SUFFIXES}
        )
endif()

target_link_libraries(${PROJECT_TEST_NAME} ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries(data-migrator-exe ${PROJECT_TEST_NAME})

add_test(test1 ${PROJECT_TEST_NAME})
#add_test(numeric ${PROJECT_SOURCE_DIR}/test/main_tests/numeric_unittest.cc)
install(TARGETS ${PROJECT_TEST_NAME} DESTINATION bin)
