package istc.bigdawg.postgresql;

import java.util.HashMap;
import java.util.Map;

public class PostgresSQLReserved {
    static Map<String, Boolean> reservedWords;

    static {
        reservedWords = new HashMap<>();
        reservedWords.put("ALL", true);
        reservedWords.put("ANALYSE", true);
        reservedWords.put("ANALYZE", true);
        reservedWords.put("AND", true);
        reservedWords.put("ANY", true);
        reservedWords.put("ARRAY", true);
        reservedWords.put("AS", true);
        reservedWords.put("ASC", true);
        reservedWords.put("ASYMMETRIC", true);
        reservedWords.put("AUTHORIZATION", true);
        reservedWords.put("BINARY", true);
        reservedWords.put("BOTH", true);
        reservedWords.put("CASE", true);
        reservedWords.put("CAST", true);
        reservedWords.put("CHECK", true);
        reservedWords.put("COLLATE", true);
        reservedWords.put("COLUMN", true);
        reservedWords.put("CONCURRENTLY", true);
        reservedWords.put("CONSTRAINT", true);
        reservedWords.put("CREATE", true);
        reservedWords.put("CROSS", true);
        reservedWords.put("CURRENT_TIME", true);
        reservedWords.put("CURRENT_TIMESTAMP", true);
        reservedWords.put("CURRENT_USER", true);
        reservedWords.put("DEFAULT", true);
        reservedWords.put("DEFERRABLE", true);
        reservedWords.put("DESC", true);
        reservedWords.put("DISTINCT", true);
        reservedWords.put("DO", true);
        reservedWords.put("END", true);
        reservedWords.put("EXCEPT", true);
        reservedWords.put("FALSE", true);
        reservedWords.put("FETCH", true);
        reservedWords.put("FOR", true);
        reservedWords.put("FOREIGN", true);
        reservedWords.put("FREEZE", true);
        reservedWords.put("FROM", true);
        reservedWords.put("FULL", true);
        reservedWords.put("GRANT", true);
        reservedWords.put("GROUP", true);
        reservedWords.put("HAVING", true);
        reservedWords.put("ILIKE", true);
        reservedWords.put("IN", true);
        reservedWords.put("INITIALLY", true);
        reservedWords.put("INNER", true);
        reservedWords.put("INTERSECT", true);
        reservedWords.put("INTO", true);
        reservedWords.put("IS", true);
        reservedWords.put("ISNULL", true);
        reservedWords.put("JOIN", true);
        reservedWords.put("LATERAL", true);
        reservedWords.put("LEADING", true);
        reservedWords.put("LEFT", true);
        reservedWords.put("LIKE", true);
        reservedWords.put("LIMIT", true);
        reservedWords.put("LOCALTIME", true);
        reservedWords.put("LOCALTIMESTAMP", true);
        reservedWords.put("NATURAL", true);
        reservedWords.put("NOT", true);
        reservedWords.put("NOTNULL", true);
        reservedWords.put("NULL", true);
        reservedWords.put("OFFSET", true);
        reservedWords.put("ON", true);
        reservedWords.put("ONLY", true);
        reservedWords.put("OR", true);
        reservedWords.put("ORDER", true);
        reservedWords.put("OUTER", true);
        reservedWords.put("OVERLAPS", true);
        reservedWords.put("PLACING", true);
        reservedWords.put("PRIMARY", true);
        reservedWords.put("REFERENCES", true);
        reservedWords.put("RETURNING", true);
        reservedWords.put("RIGHT", true);
        reservedWords.put("SELECT", true);
        reservedWords.put("SESSION_USER", true);
        reservedWords.put("SIMILAR", true);
        reservedWords.put("SOME", true);
        reservedWords.put("SYMMETRIC", true);
        reservedWords.put("TABLE", true);
        reservedWords.put("TABLESAMPLE", true);
        reservedWords.put("THEN", true);
        reservedWords.put("TO", true);
        reservedWords.put("TRAILING", true);
        reservedWords.put("TRUE", true);
        reservedWords.put("UNION", true);
        reservedWords.put("UNIQUE", true);
        reservedWords.put("USER", true);
        reservedWords.put("USING", true);
        reservedWords.put("VARIADIC", true);
        reservedWords.put("VERBOSE", true);
        reservedWords.put("WHEN", true);
        reservedWords.put("WHERE", true);
        reservedWords.put("WINDOW", true);
        reservedWords.put("WITH", true);
    }

}
